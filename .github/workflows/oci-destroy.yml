name: OCI Destroy Pipeline

on:
  workflow_dispatch:

jobs:
  prepare_and_helm_destroy:
    name: Prepare & Helm Uninstall Charts
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Decode terraform keys
        run: |
          echo "${{ secrets.TF_PRIVATE_KEY_B64 }}"    | base64 -d > oci_api_key.pem
          echo "${{ secrets.TF_OKE_SSH_KEY_B64 }}"     | base64 -d > oke_ssh_key.pub
          echo "${{ secrets.TF_VPN_SSH_KEY_B64 }}"     | base64 -d > vpn_ssh_key.pub
          echo "${{ secrets.TF_VPN_PRIVATE_KEY_B64 }}" | base64 -d > vpn_key.pem

      - name: Render backend_override.tf from template
        run: |
          sed \
            -e "s|__BUCKET__|${{ secrets.OCI_TF_BUCKET }}|" \
            -e "s|__NAMESPACE__|${{ secrets.OCI_NAMESPACE }}|" \
            -e "s|__REGION__|${{ secrets.REGION }}|" \
            -e "s|__COMPARTMENT_OCID__|${{ secrets.COMPARTMENT_OCID }}|" \
            backend.tpl > backend_override.tf

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        env:
          TF_INPUT: false
          TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}
          TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
          TF_VAR_fingerprint: ${{ secrets.FINGERPRINT }}
          TF_VAR_region: ${{ secrets.REGION }}
          TF_VAR_private_key_path: "./oci_api_key.pem"
        run: |
          terraform init \
            -backend-config="tenancy_ocid=${{ secrets.TENANCY_OCID }}" \
            -backend-config="user_ocid=${{ secrets.USER_OCID }}" \
            -backend-config="fingerprint=${{ secrets.FINGERPRINT }}" \
            -backend-config="private_key_path=./oci_api_key.pem"

      - name: Capture kubeconfig from Terraform state
        run: terraform output -raw kubeconfig > kubeconfig.yaml

      - name: Set up Kubernetes config
        run: |
          mkdir -p ~/.kube
          cp kubeconfig.yaml ~/.kube/config

      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.TF_PRIVATE_KEY_B64 }}" | base64 -d > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.USER_OCID }}
          fingerprint=${{ secrets.FINGERPRINT }}
          tenancy=${{ secrets.TENANCY_OCID }}
          region=${{ secrets.REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Uninstall n8n
        run: helm uninstall n8n --namespace workflows --wait --timeout 5m || true

      - name: Uninstall pgAdmin
        run: helm uninstall pgadmin --namespace data --wait --timeout 5m || true

      - name: Uninstall PostgreSQL
        run: |
          helm uninstall postgres --namespace data --wait --timeout 5m || true

      - name: Delete Postgres PVCs
        run: |
          echo "Deleting PostgreSQL PVCs (this will trigger volume deletion if StorageClass reclaim policy is Delete)..."
          kubectl delete pvc -l app.kubernetes.io/instance=postgres -n data || true

      - name: Uninstall ingress-nginx-config
        run: helm uninstall ingress-nginx-config --namespace ingress-nginx --wait --timeout 5m || true

      - name: Uninstall cert-manager-config
        run: helm uninstall cert-manager-config --namespace cert-manager --wait --timeout 5m || true

      - name: Uninstall cert-manager
        run: helm uninstall cert-manager --namespace cert-manager --wait --timeout 5m || true

      - name: Cleanup temporary files
        if: always()
        run: rm -f oci_api_key.pem oke_ssh_key.pub vpn_ssh_key.pub vpn_key.pem backend_override.tf kubeconfig.yaml

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: prepare_and_helm_destroy
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Decode terraform keys
        run: |
          echo "${{ secrets.TF_PRIVATE_KEY_B64 }}"    | base64 -d > oci_api_key.pem
          echo "${{ secrets.TF_OKE_SSH_KEY_B64 }}"     | base64 -d > oke_ssh_key.pub
          echo "${{ secrets.TF_VPN_SSH_KEY_B64 }}"     | base64 -d > vpn_ssh_key.pub
          echo "${{ secrets.TF_VPN_PRIVATE_KEY_B64 }}" | base64 -d > vpn_key.pem

      - name: Create terraform.tfvars with decoded secrets
        run: |
          tee terraform.tfvars > /dev/null <<EOF
          tenancy_ocid         = "${{ secrets.TENANCY_OCID }}"
          user_ocid            = "${{ secrets.USER_OCID }}"
          region               = "${{ secrets.REGION }}"
          availability_domain  = "${{ secrets.AVAILABILITY_DOMAIN }}"
          fingerprint          = "${{ secrets.FINGERPRINT }}"

          private_key = <<EOKEY
          $(cat oci_api_key.pem)
          EOKEY

          compartment_ocid     = "${{ secrets.COMPARTMENT_OCID }}"
          vcn_cidr_block       = "${{ secrets.VCN_CIDR_BLOCK }}"
          oke_k8s_version      = "${{ secrets.OKE_K8S_VERSION }}"

          oke_ssh_key = <<EOKEY
          $(cat oke_ssh_key.pub)
          EOKEY

          vpn_ssh_key = <<EOKEY
          $(cat vpn_ssh_key.pub)
          EOKEY

          vpn_private_key = <<EOKEY
          $(cat vpn_key.pem)
          EOKEY

          vpn_instance_shape   = "${{ secrets.VPN_INSTANCE_SHAPE }}"
          vpn_image_ocid       = "${{ secrets.VPN_IMAGE_OCID }}"
          oke_node_shape       = "${{ secrets.OKE_NODE_SHAPE }}"
          oke_image_ocid       = "${{ secrets.OKE_IMAGE_OCID }}"
          budget_alert_email   = "${{ secrets.BUDGET_ALERT_EMAIL }}"
          EOF

      - name: Render backend_override.tf from template
        run: |
          sed \
            -e "s|__BUCKET__|${{ secrets.OCI_TF_BUCKET }}|" \
            -e "s|__NAMESPACE__|${{ secrets.OCI_NAMESPACE }}|" \
            -e "s|__REGION__|${{ secrets.REGION }}|" \
            -e "s|__COMPARTMENT_OCID__|${{ secrets.COMPARTMENT_OCID }}|" \
            backend.tpl > backend_override.tf

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        env:
          TF_INPUT: false
          TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}
          TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
          TF_VAR_fingerprint: ${{ secrets.FINGERPRINT }}
          TF_VAR_region: ${{ secrets.REGION }}
          TF_VAR_private_key_path: "./oci_api_key.pem"
        run: |
          terraform init \
            -backend-config="tenancy_ocid=${{ secrets.TENANCY_OCID }}" \
            -backend-config="user_ocid=${{ secrets.USER_OCID }}" \
            -backend-config="fingerprint=${{ secrets.FINGERPRINT }}" \
            -backend-config="private_key_path=./oci_api_key.pem"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan Destroy
        run: terraform plan -destroy -no-color -var-file="terraform.tfvars"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file="terraform.tfvars"

      - name: Cleanup sensitive files
        if: always()
        run: rm -f oci_api_key.pem oke_ssh_key.pub vpn_ssh_key.pub vpn_key.pem backend_override.tf terraform.tfvars
